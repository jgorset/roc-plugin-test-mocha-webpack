{"version":3,"sources":["../../src/actions/webpack.js"],"names":["getRegexp","regexp","RegExp","makeRe","context","settings","config","directory","webpackConfig","newWebpackConfig","devtool","entry","test","rocMetaInfo","outputName","require","resolve","externals","unshift","alias","src","node","path","plugins","push","DefinePlugin","__PATH_TESTS__","JSON","stringify","tests","__PATTERN_TESTS__","pattern","__PATH_SRC__","__PATTERN_SRC__"],"mappings":";;;;;;;;AAAA;;AAEA;;AACA;;;;AACA;;;;;;AAEA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,QAAIA,kBAAkBC,MAAtB,EAA8B;AAC1B,eAAOD,MAAP;AACH;;AAED,WAAO,qBAAWE,MAAX,CAAmB,KAAIF,MAAO,EAA9B,CAAP;AACH;;kBAEc;AAAA,4BAAGG,OAAH;AAAA,QAAwBC,QAAxB,gBAAcC,MAAd,CAAwBD,QAAxB;AAAA,QAAoCE,SAApC,gBAAoCA,SAApC;AAAA,WAAsD,MAAOC,aAAD,IAAmB;AAC1F,cAAMC,gCAAwBD,aAAxB,CAAN;;AAEAC,yBAAiBC,OAAjB,GAA2B,mBAA3B;;AAEA,cAAMC,QAAQN,SAASO,IAAT,CAAcD,KAAd,GACV,0BAAgBN,SAASO,IAAT,CAAcD,KAA9B,CADU,GAEV,eAFJ;;AAIAF,yBAAiBE,KAAjB,CAAuBF,iBAAiBI,WAAjB,CAA6BC,UAApD,IAAkEC,QAAQC,OAAR,CAAgBL,KAAhB,CAAlE;;AAEA;AACAF,yBAAiBQ,SAAjB,CAA2BC,OAA3B,CAAmC;AAC/B,aAACH,QAAQC,OAAR,CAAgBL,KAAhB,CAAD,GAA0B;AADK,SAAnC;;AAIAF,yBAAiBO,OAAjB,CAAyBG,KAAzB,gBACOV,iBAAiBO,OAAjB,CAAyBG,KADhC;AAEIC,iBAAK,gBAAKb,SAAL,EAAgBF,SAASO,IAAT,CAAcS,IAAd,CAAmBD,GAAnB,CAAuBE,IAAvC;AAFT;;AAKAb,yBAAiBc,OAAjB,CAAyBC,IAAzB,CACI,IAAI,kBAAQC,YAAZ,CAAyB;AACrBC,4BAAgBC,KAAKC,SAAL,CAAe,gBAAKrB,SAAL,EAAgBF,SAASO,IAAT,CAAcS,IAAd,CAAmBQ,KAAnB,CAAyBP,IAAzC,CAAf,CADK;AAErBQ,+BAAmB9B,UAAUK,SAASO,IAAT,CAAcS,IAAd,CAAmBQ,KAAnB,CAAyBE,OAAnC,CAFE;AAGrBC,0BAAcL,KAAKC,SAAL,CAAe,gBAAKrB,SAAL,EAAgBF,SAASO,IAAT,CAAcS,IAAd,CAAmBD,GAAnB,CAAuBE,IAAvC,CAAf,CAHO;AAIrBW,6BAAiBjC,UAAUK,SAASO,IAAT,CAAcS,IAAd,CAAmBD,GAAnB,CAAuBW,OAAjC;AAJI,SAAzB,CADJ;;AASA,eAAOtB,gBAAP;AACH,KA/Bc;AAAA,C","file":"webpack.js","sourcesContent":["import { join } from 'path';\n\nimport { getAbsolutePath } from 'roc';\nimport micromatch from 'micromatch';\nimport webpack from 'webpack';\n\nfunction getRegexp(regexp) {\n    if (regexp instanceof RegExp) {\n        return regexp;\n    }\n\n    return micromatch.makeRe(`./${regexp}`);\n}\n\nexport default ({ context: { config: { settings }, directory } }) => () => (webpackConfig) => {\n    const newWebpackConfig = { ...webpackConfig };\n\n    newWebpackConfig.devtool = 'inline-source-map';\n\n    const entry = settings.test.entry ?\n        getAbsolutePath(settings.test.entry) :\n        './utils/entry';\n\n    newWebpackConfig.entry[newWebpackConfig.rocMetaInfo.outputName] = require.resolve(entry);\n\n    // Always include the entry point\n    newWebpackConfig.externals.unshift({\n        [require.resolve(entry)]: false,\n    });\n\n    newWebpackConfig.resolve.alias = {\n        ...newWebpackConfig.resolve.alias,\n        src: join(directory, settings.test.node.src.path),\n    };\n\n    newWebpackConfig.plugins.push(\n        new webpack.DefinePlugin({\n            __PATH_TESTS__: JSON.stringify(join(directory, settings.test.node.tests.path)),\n            __PATTERN_TESTS__: getRegexp(settings.test.node.tests.pattern),\n            __PATH_SRC__: JSON.stringify(join(directory, settings.test.node.src.path)),\n            __PATTERN_SRC__: getRegexp(settings.test.node.src.pattern),\n        })\n    );\n\n    return newWebpackConfig;\n};\n"]}
{"version":3,"sources":["../../src/nyc/index.js"],"names":["nycRunner","log","nyc","require","resolve","mocha","getGrep","grep","coverageCommand","mochaCommand","artifact","getCommand","coverage","cleanupCoverage","sync","join","process","cwd","getArtifact","compiler","err","stats","statsJson","toJson","errors","length","warnings","map","error","small","warn","warning","undefined","bundleName","name","assets","script","outputPath","runningTest","nextCommand","runTest","command","cleanupCoverageWrapper","then","watchTest","watch","runtime","webpackConfig","mochaRunner","info","env","ROC_TEST_RUNTIME","initRuntime","poll","ROC_TEST_ENTRY","run","abort"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\n\nimport { execute, executeSyncExit, getSettings, initLog } from 'roc';\nimport { parseStats } from 'roc-package-webpack-dev';\nimport rimraf from 'rimraf';\nimport webpack from 'webpack';\n\nimport runMocha from './mocha';\n\nconst log = initLog();\n\nconst nyc = require.resolve('nyc/bin/nyc');\nconst mocha = require.resolve('mocha/bin/mocha');\n\nconst getGrep = (grep) => (grep ? ` --grep ${grep}` : '');\nconst coverageCommand = `${nyc} --reporter=text-summary --include /`;\n\nconst mochaCommand = (artifact, grep) => `${mocha} ` +\n    `${getGrep(grep)} ${artifact}`;\n\nconst getCommand = (artifact, grep, coverage) => (coverage ?\n    `${coverageCommand} ${mochaCommand(artifact, grep)}` :\n    mochaCommand(artifact, grep));\n\nconst cleanupCoverage = () => rimraf.sync(path.join(process.cwd(), '.nyc_output'));\n\nfunction getArtifact(compiler, err, stats) {\n    if (err) {\n        throw err;\n    }\n\n    const statsJson = stats.toJson();\n\n    if (statsJson.errors.length > 0 || statsJson.warnings.length > 0) {\n        if (statsJson.errors.length > 0) {\n            statsJson.errors.map((error) => log.small.warn(error));\n        }\n\n        if (statsJson.warnings.length > 0) {\n            statsJson.warnings.map((warning) => log.small.warn(warning));\n        }\n\n        return undefined;\n    }\n\n    let bundleName = `${getSettings('build').name}.js`;\n\n    if (statsJson.assets && statsJson.assets.length > 0) {\n        bundleName = parseStats(statsJson).script[0];\n    }\n\n    return path.join(compiler.outputPath, '/', bundleName);\n}\n\nlet runningTest = false;\nlet nextCommand;\n\nfunction runTest(command) {\n    function cleanupCoverageWrapper() {\n        cleanupCoverage();\n        if (nextCommand) {\n            runTest(nextCommand);\n        } else {\n            runningTest = false;\n        }\n    }\n\n    nextCommand = null;\n    runningTest = true;\n    execute(command)\n       .then(cleanupCoverageWrapper, cleanupCoverageWrapper);\n}\n\nfunction watchTest(command) {\n    if (runningTest) {\n        nextCommand = command;\n    } else {\n        runTest(command);\n    }\n}\n\nexport default function nycRunner({ grep, watch, coverage, runtime, webpackConfig }) {\n    const compiler = webpack(webpackConfig);\n\n    if (watch) {\n        let mochaRunner;\n\n        if (coverage) {\n            log.small.info('You have enabled coverage for the watch mode for roc-plugin-test-mocha-webpack. ' +\n                'This will make the tests run slower, the recommendation is to not use coverage in watch mode.');\n\n            process.env.ROC_TEST_RUNTIME = runtime;\n        } else {\n            if (runtime) {\n                // eslint-disable-next-line\n                require('roc-plugin-start').initRuntime(false, true);\n            }\n\n            mochaRunner = runMocha(grep);\n        }\n\n        compiler.watch({\n            poll: true,\n        }, (err, stats) => {\n            const artifact = getArtifact(compiler, err, stats);\n            if (artifact) {\n                if (coverage) {\n                    process.env.ROC_TEST_ENTRY = artifact;\n                    watchTest(getCommand(require.resolve('./utils/runtime'), grep, coverage));\n                } else {\n                    mochaRunner.run(artifact);\n                }\n            } else if (mochaRunner) {\n                mochaRunner.abort();\n            }\n        });\n    } else {\n        compiler.run((err, stats) => {\n            process.env.ROC_TEST_ENTRY = getArtifact(compiler, err, stats);\n            executeSyncExit(getCommand(require.resolve('./utils/runtime'), grep, coverage));\n\n            if (coverage) {\n                executeSyncExit(`${nyc} report --report-dir coverage/nyc/html --reporter=html`);\n                executeSyncExit(`${nyc} report --report-dir coverage/nyc/cobertura --reporter=cobertura`);\n                cleanupCoverage();\n            }\n        });\n    }\n}\n"]}